//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Joystick Controller.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JoystickController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JoystickController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Joystick Controller"",
    ""maps"": [
        {
            ""name"": ""CanArm Controls"",
            ""id"": ""1fbde9d2-1056-4a83-9b6c-a3ea98241f1a"",
            ""actions"": [
                {
                    ""name"": ""joystickX"",
                    ""type"": ""Value"",
                    ""id"": ""7e842dfc-1934-4ee6-9b7e-f6ead784599a"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""joystickY"",
                    ""type"": ""Value"",
                    ""id"": ""454aa3cb-dc27-4369-9afd-4db24a1cab3d"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""23a50dd0-558f-495c-b158-77be5121ab9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Value"",
                    ""id"": ""692be12c-609e-43a3-bfe5-f12f44f1e4e1"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6e02bfc3-6427-46f2-9e2c-442a69820891"",
                    ""path"": ""<HID::Adafruit Feather RP2040>/rx"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""joystickX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96ddd18d-9d80-4496-a0c4-f7bcc6e129a5"",
                    ""path"": ""<HID::Adafruit Feather RP2040>/ry"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""joystickY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74b1ad84-1ead-498a-a6f1-03f806302f14"",
                    ""path"": ""<HID::Adafruit Feather RP2040>/button9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47479557-a348-4b03-abb5-a42d594518d5"",
                    ""path"": ""<HID::Adafruit Feather RP2040>/button10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Feather Controller"",
            ""bindingGroup"": ""Feather Controller"",
            ""devices"": []
        }
    ]
}");
        // CanArm Controls
        m_CanArmControls = asset.FindActionMap("CanArm Controls", throwIfNotFound: true);
        m_CanArmControls_joystickX = m_CanArmControls.FindAction("joystickX", throwIfNotFound: true);
        m_CanArmControls_joystickY = m_CanArmControls.FindAction("joystickY", throwIfNotFound: true);
        m_CanArmControls_Grab = m_CanArmControls.FindAction("Grab", throwIfNotFound: true);
        m_CanArmControls_Newaction = m_CanArmControls.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CanArm Controls
    private readonly InputActionMap m_CanArmControls;
    private List<ICanArmControlsActions> m_CanArmControlsActionsCallbackInterfaces = new List<ICanArmControlsActions>();
    private readonly InputAction m_CanArmControls_joystickX;
    private readonly InputAction m_CanArmControls_joystickY;
    private readonly InputAction m_CanArmControls_Grab;
    private readonly InputAction m_CanArmControls_Newaction;
    public struct CanArmControlsActions
    {
        private @JoystickController m_Wrapper;
        public CanArmControlsActions(@JoystickController wrapper) { m_Wrapper = wrapper; }
        public InputAction @joystickX => m_Wrapper.m_CanArmControls_joystickX;
        public InputAction @joystickY => m_Wrapper.m_CanArmControls_joystickY;
        public InputAction @Grab => m_Wrapper.m_CanArmControls_Grab;
        public InputAction @Newaction => m_Wrapper.m_CanArmControls_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_CanArmControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CanArmControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICanArmControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CanArmControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CanArmControlsActionsCallbackInterfaces.Add(instance);
            @joystickX.started += instance.OnJoystickX;
            @joystickX.performed += instance.OnJoystickX;
            @joystickX.canceled += instance.OnJoystickX;
            @joystickY.started += instance.OnJoystickY;
            @joystickY.performed += instance.OnJoystickY;
            @joystickY.canceled += instance.OnJoystickY;
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ICanArmControlsActions instance)
        {
            @joystickX.started -= instance.OnJoystickX;
            @joystickX.performed -= instance.OnJoystickX;
            @joystickX.canceled -= instance.OnJoystickX;
            @joystickY.started -= instance.OnJoystickY;
            @joystickY.performed -= instance.OnJoystickY;
            @joystickY.canceled -= instance.OnJoystickY;
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ICanArmControlsActions instance)
        {
            if (m_Wrapper.m_CanArmControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICanArmControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CanArmControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CanArmControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CanArmControlsActions @CanArmControls => new CanArmControlsActions(this);
    private int m_FeatherControllerSchemeIndex = -1;
    public InputControlScheme FeatherControllerScheme
    {
        get
        {
            if (m_FeatherControllerSchemeIndex == -1) m_FeatherControllerSchemeIndex = asset.FindControlSchemeIndex("Feather Controller");
            return asset.controlSchemes[m_FeatherControllerSchemeIndex];
        }
    }
    public interface ICanArmControlsActions
    {
        void OnJoystickX(InputAction.CallbackContext context);
        void OnJoystickY(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
    }
}
